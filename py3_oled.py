import spidev
import time
import RPi.GPIO as GPIO

GPIO.setmode(GPIO.BCM)
GPIO.setup(17, GPIO.OUT)
GPIO.setup(12, GPIO.OUT)

ssdvals = {
    'SSD1306_96_39': 1,
    'SSD1306_LCDWIDTH': 96,
    'SSD1306_LCDHEIGHT': 39,
    'SSD1306_DISPLAYOFF': 0xAE,
    'SSD1306_SETDISPLAYCLOCKDIV': 0xD5,
    'SSD1306_SETMULTIPLEX': 0xA8,
    'SSD1306_SETDISPLAYOFFSET': 0xD3,
    'SSD1306_SETSTARTLINE': 0x40,
    'SSD1306_CHARGEPUMP': 0x8D,
    'SSD1306_SETSEGMENTREMAP': 0xA1,
    'SSD1306_SEGREMAP': 0xA0,
    'SSD1306_COMSCANDEC': 0xC8,
    'SSD1306_SETCOMPINS': 0xDA,
    'SSD1306_SETCONTRAST': 0x81,
    'SSD1306_SETPRECHARGE': 0xD9,
    'SSD1306_SETVCOMDETECT': 0xDB,
    'SSD1306_DISPLAYALLON_RESUME': 0xA4,
    'SSD1306_NORMALDISPLAY': 0xA6,
    'SSD1306_DISPLAYON': 0xAF,
    'SSD1306_DISPLAYALLON': 0xA5,
    'SSD1306_INVERTDISPLAY': 0xA7,
    'SSD1306_SETLOWCOLUMN': 0x00,
    'SSD1306_SETHIGHCOLUMN': 0x10,
    'SSD1306_MEMORYMODE': 0x20,
    'SSD1306_COLUMNADDR': 0x21,
    'SSD1306_PAGEADDR': 0x22,
    'SSD1306_COMSCANINC': 0xC0,
    'SSD1306_SEGREMAP': 0xA0,
    'SSD1306_EXTERNALVCC': 0x1,
    'SSD1306_SWITCHCAPVCC': 0x2,
    'SSD1306_ACTIVATE_SCROLL': 0x2F,
    'SSD1306_DEACTIVATE_SCROLL': 0x2E,
    'SSD1306_SET_VERTICAL_SCROLL_AREA': 0xA3,
    'SSD1306_RIGHT_HORIZONTAL_SCROLL': 0x26,
    'SSD1306_LEFT_HORIZONTAL_SCROLL': 0x27,
    'SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL': 0x29,
    'SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL': 0x2A,
}

# compact 5x8 font
font = [0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x5F,0x00,0x00,0x00,0x07,0x00,0x07,0x00, # 'sp,!,"
        0x14,0x7F,0x14,0x7F,0x14, # #
        0x24,0x2A,0x7F,0x2A,0x12,0x23,0x13,0x08,0x64,0x62,0x36,0x49,0x56,0x20,0x50, #  '$,%,&
        0x00,0x08,0x07,0x03,0x00,0x00,0x1C,0x22,0x41,0x00,0x00,0x41,0x22,0x1C,0x00, #  '',(,)
        0x2A,0x1C,0x7F,0x1C,0x2A,0x08,0x08,0x3E,0x08,0x08,0x00,0x00,0x70,0x30,0x00, #  '*,+,,
        0x08,0x08,0x08,0x08,0x08,0x00,0x00,0x60,0x60,0x00,0x20,0x10,0x08,0x04,0x02, #  '-,.,/
        0x3E,0x51,0x49,0x45,0x3E,0x00,0x42,0x7F,0x40,0x00,0x72,0x49,0x49,0x49,0x46, #  '0,1,2
        0x21,0x41,0x49,0x4D,0x33,0x18,0x14,0x12,0x7F,0x10,0x27,0x45,0x45,0x45,0x39, #  '3,4,5
        0x3C,0x4A,0x49,0x49,0x31,0x41,0x21,0x11,0x09,0x07,0x36,0x49,0x49,0x49,0x36, #  '6,7,8
        0x46,0x49,0x49,0x29,0x1E,0x00,0x00,0x14,0x00,0x00,0x00,0x40,0x34,0x00,0x00, #  '9,:,;
        0x00,0x08,0x14,0x22,0x41,0x14,0x14,0x14,0x14,0x14,0x00,0x41,0x22,0x14,0x08, #  '<,=,>
        0x02,0x01,0x59,0x09,0x06,0x3E,0x41,0x5D,0x59,0x4E,                          #  '?,@
        0x7C,0x12,0x11,0x12,0x7C,                                                   #  'A
        0x7F,0x49,0x49,0x49,0x36,0x3E,0x41,0x41,0x41,0x22,0x7F,0x41,0x41,0x41,0x3E, #  'B,C,D
        0x7F,0x49,0x49,0x49,0x41,0x7F,0x09,0x09,0x09,0x01,0x3E,0x41,0x41,0x51,0x73, #  'E,F,G
        0x7F,0x08,0x08,0x08,0x7F,0x00,0x41,0x7F,0x41,0x00,0x20,0x40,0x41,0x3F,0x01, #  'H,I,J
        0x7F,0x08,0x14,0x22,0x41,0x7F,0x40,0x40,0x40,0x40,0x7F,0x02,0x1C,0x02,0x7F, #  'K,L,M
        0x7F,0x04,0x08,0x10,0x7F,0x3E,0x41,0x41,0x41,0x3E,0x7F,0x09,0x09,0x09,0x06, #  'N,O,P
        0x3E,0x41,0x51,0x21,0x5E,0x7F,0x09,0x19,0x29,0x46,0x26,0x49,0x49,0x49,0x32, #  'Q,R,S
        0x03,0x01,0x7F,0x01,0x03,0x3F,0x40,0x40,0x40,0x3F,0x1F,0x20,0x40,0x20,0x1F, #  'T,U,V
        0x3F,0x40,0x38,0x40,0x3F,0x63,0x14,0x08,0x14,0x63,0x03,0x04,0x78,0x04,0x03, #  'W,X,Y
        0x61,0x59,0x49,0x4D,0x43,                                                   #  'Z
        0x00,0x7F,0x41,0x41,0x41,0x02,0x04,0x08,0x10,0x20,                          #  '[,\'
        0x00,0x41,0x41,0x41,0x7F,0x04,0x02,0x01,0x02,0x04,0x40,0x40,0x40,0x40,0x40, #  '],^,_
        0x00,0x03,0x07,0x08,0x00,0x20,0x54,0x54,0x38,0x40,0x7F,0x28,0x44,0x44,0x38, #  '`,a,b
        0x38,0x44,0x44,0x44,0x28,0x38,0x44,0x44,0x28,0x7F,0x38,0x54,0x54,0x54,0x18, #  'c,d,e
        0x00,0x08,0x7E,0x09,0x02,0x0C,0x52,0x52,0x4A,0x3C,0x7F,0x08,0x04,0x04,0x78, #  'f,g,h
        0x00,0x44,0x7D,0x40,0x00,0x20,0x40,0x40,0x3D,0x00,0x7F,0x10,0x28,0x44,0x00, #  'i,j,k
        0x00,0x41,0x7F,0x40,0x00,0x7C,0x04,0x78,0x04,0x78,0x7C,0x08,0x04,0x04,0x78, #  'l,m,n
        0x38,0x44,0x44,0x44,0x38,0x7C,0x18,0x24,0x24,0x18,0x18,0x24,0x24,0x18,0x7C, #  'o,p,q
        0x7C,0x08,0x04,0x04,0x08,0x48,0x54,0x54,0x54,0x24,0x04,0x04,0x3F,0x44,0x24, #  'r,s,t
        0x3C,0x40,0x40,0x20,0x7C,0x1C,0x20,0x40,0x20,0x1C,0x3C,0x40,0x30,0x40,0x3C, #  'u,v,w
        0x44,0x28,0x10,0x28,0x44,0x4C,0x50,0x50,0x50,0x3C,0x44,0x64,0x54,0x4C,0x44, #  'x,y,z
        0x00,0x08,0x36,0x41,0x00,0x00,0x00,0x77,0x00,0x00,0x00,0x41,0x36,0x08,0x00, #  '{,|,}
        0x02,0x01,0x02,0x04,0x02 ]                                                  #  '~

_x = 0
_y = 0
_sx = 1
_sy = 1

spi = spidev.SpiDev()


# Send command to OLED m display
def OLED_M_command(val):
    GPIO.output(17, GPIO.LOW)
    spi.open(0,1)
    spi.writebytes([val])
    spi.close()

# Send data to OLED m display
def OLED_M_data(data):
    GPIO.output(17, GPIO.HIGH)
    spi.open(0,1)
    spi.writebytes([data])
    spi.close()

# intialise OLED
def OLED_M_Init():
    GPIO.output(12, GPIO.LOW)
    time.sleep(1)
    GPIO.output(12, GPIO.HIGH)
    OLED_M_command(ssdvals['SSD1306_DISPLAYOFF'])              #0xAE  Set OLED Display Off
    OLED_M_command(ssdvals['SSD1306_SETDISPLAYCLOCKDIV'])      #0xD5  Set Display Clock Divide Ratio/Oscillator Frequency
    OLED_M_command(0x80)
    OLED_M_command(ssdvals['SSD1306_SETMULTIPLEX'])            #0xA8  Set Multiplex Ratio
    OLED_M_command(0x27)
    OLED_M_command(ssdvals['SSD1306_SETSEGMENTREMAP'])
    OLED_M_command(ssdvals['SSD1306_COMSCANDEC'])
    OLED_M_command(ssdvals['SSD1306_SETDISPLAYOFFSET'])        #0xD3  Set Display Offset
    OLED_M_command(0x00)
    OLED_M_command(ssdvals['SSD1306_CHARGEPUMP'])              #0x8D  Set Charge Pump
    OLED_M_command(0x14)
    OLED_M_command(ssdvals['SSD1306_SETSTARTLINE'])            #0x40  Set Display Start Line
    OLED_M_command(ssdvals['SSD1306_SETCOMPINS'])              #0xDA  Set COM Pins Hardware Configuration
    OLED_M_command(0x12)
    OLED_M_command(ssdvals['SSD1306_SETCONTRAST'])             #0x81   Set Contrast Control
    OLED_M_command(0xAF)
    OLED_M_command(ssdvals['SSD1306_SETPRECHARGE'])            #0xD9   Set Pre-Charge Period
    OLED_M_command(0x25)
    OLED_M_command(ssdvals['SSD1306_SETVCOMDETECT'])           #0xDB   Set VCOMH Deselect Level
    OLED_M_command(0x20)
    OLED_M_command(ssdvals['SSD1306_DISPLAYALLON_RESUME'])     #0xA4   Set Entire Display On/Off
    OLED_M_command(ssdvals['SSD1306_NORMALDISPLAY'])           # 0xA6   Set Normal/Inverse Display
    OLED_M_command(ssdvals['SSD1306_DISPLAYON'])

def OLED_SetRow(add):
    add = 0xB0 | add
    OLED_M_command(add)

def OLED_SetColumn(add):
    add += 32
    OLED_M_command((ssdvals['SSD1306_SETHIGHCOLUMN'] | (add >> 4))) # SET_HIGH_COLUMN
    OLED_M_command((0x0f & add))                         # SET LOW_COLUMN
    
def OLED_SetScale(sx, sy):
    global _sx
    global _sy
    _sx = sx
    _sy = sy

def OLED_Clear():
    global _x
    global _y
    
    for i in range(0, 5): # 5*8=40 pixel rows (actually 39)
        OLED_SetRow(i)
        OLED_SetColumn(0)
        for j in range(0, 96):
            OLED_M_data(0)

    _x = 0
    _y = 0
    OLED_SetRow(0)
    OLED_SetColumn(0)


# scalable horizontally and vertically
def OLED_Putchar(ch):
    global _x
    global _y
    global _sx
    global _sy

    fp = 0

    if isinstance(ch, str):
        ch = ord(ch)
    fp = (ch - ord(' '))  * 5
    
    f = 0

    mask = [0x1, 0x3, 0x7, 0xf]
    
    word = 0x0
    for i in range(0, 5):
        f = font[fp]
        byte = f << 1
        fp += 1
        if i == 5:
            byte = 0
            
        for j in  range(0, 7):
            word <<= _sy
            if byte & 0x80:
                word |= mask[_sy-1]
            byte <<= 1

        for j in range(0, _sy):
            OLED_SetRow(_y+j)
            OLED_SetColumn(_x+i*_sx)
            for k in range(0, _sx):
                data = word & 0xff
                OLED_M_data(data);

            word >>= 8;

    _x+= 6 * _sx
    if _x >= ssdvals['SSD1306_LCDWIDTH']:
        _x = 0
        OLED_SetColumn(0)
        _y += _sy
        if _y >= 5-_sy:
            _y = 0;

        OLED_SetRow(_y)

# Write a string to the OLED
def OLED_Puts(x, y, s):
    global _x
    global _y
    
    _y = y
    _x = x
    OLED_SetRow(_y)
    OLED_SetColumn(_x)
    for ch in s:
        OLED_Putchar(ch)
        _x += 1


def main():
    OLED_M_Init()

    OLED_Clear()
    while True:
        OLED_Puts(0,0, "Hello World")
        time.sleep(2)
        OLED_Puts(0,0, "           ")
        time.sleep(2)


def run():
    main()

if __name__=="__main__":
    main()

